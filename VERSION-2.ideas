
REQUIRES pyglet 1.1 (or SVN until that's released)

THIS document contains IDEAS that are not necessarily all IMPLEMENTED.


Bruce was a good idea: have some basic page types and Python shells
to do cool things. Bruce was written using pygame, which had
limitations. It was also written without much structure.


Socrates was a good idea: have a simple plain-text file format to
edit presentations. Socrates had some ugly hacks and formatting issues.
It also didn't have a way to include notes with pages.


Bruce version 2 will be written using pyglet. It will be
restructured to allow:

1. easier page type creation
2. page transitions

Version 2 will be re-designed to have a nicer command file syntax and
easier extensibility.


Bruce structure
---------------

The basic class is the Page class::

    class Page(object):
        flags = (
            # name        , takes arg?
            ('booleanflag', False),
            ('stringflag',  True),
        )

        def __init__(self, viewport, content, **flags):
            '''Initialise the page given the viewport (width, height) in
            pixels.
            '''

        def draw(self):
            '''Draw self - assume orthographic projection.
            '''

        def update(self, dt):
            '''Invoked periodically with the time since the last
            update()
            '''

        def on_enter(self):
            '''Invoked when the page is put up on the screen.
            '''

        def on_next(self):
            '''Invoked on the "next" event (cursor right or left mouse
            button). If the handler returns event.EVENT_HANDLED then
            the presentation does not leave this page.
            '''

        def on_previous(self):
            '''Invoked on the "previous" event (cursor left or right mouse
            button). If the handler returns event.EVENT_HANDLED then
            the presentation does not leave this page.
            '''

        def on_leave(self):
            '''Invoked when the page is removed from the screen.
            '''

        def as_html(self):
            '''Invoked to generate the HTML version of the presentation.
            '''

The Page is pushed onto the pyglet event stack when it is activated and
thus may have handlers for any standard pyglet.window events. A page's
life thus consists of:

1. __init__
2. on_enter
3. lots of update / draw
4. on_next or on_previous and optionally back to #3
5. on_leave


class Presentation(object):

    def __init__(self, viewport, pages):

    def on_mouse_press(self, ...):
        if lmb:
            if not self.page.on_next():
                self.next_page()
        elif rmb:
            if not self.page.on_previous():
                self.previous_page()

    def on_text_motion(self, ...):
        # left/right cursor
        # pgup, pgdown
        # start, end


Configuration
-------------

Config options::

    (TBD)

    footer_image - path to an image displayed at bottom of page
    footer_align - left, center|centre, right

Command file basic syntax
-------------------------

Commands start with a double-period::

    ..<page type>
      [page flags, one per line]

    [page content indented]

The arguments are preceeded by two spaces.

Command file syntax
"""""""""""""""""""

Every page may include the following flags::

**nofooter**
  Don't display a footer image

**auto=<float>**
  Automatically advance to the next page after <float> seconds.

**charset=<charset>**
  Page content, **including flags** is encoded using the charset
  (default is ASCII).

**transition=<type;args>**
  Page transition type with optional transition arguments.

Lines in the input starting with '#' are always left out of displayed
content, but they are retained for the notes HTML output.

Pages consist of a start marker "--- <some name>" followed by lines of
content. If the start marker line has content itself, like
``--- image kitten.jpg`` then that content is considered the first line
of the page's content. This is convenient for page types that
only have one line of content like images and code.

Page types are:

**--- text** - a normal text page
    Each line in the text page is displayed on screen.

    Lines can start with one or more special characters. These include:

    . - "hidden". Each 'next' will display another hidden line.
    . = display as a title
    . : display in codefont (fixed width)
    . * display in bold
    . / display line in italics
    . < or > smaller or bigger (can have multiple)
    . \ no more special characters will be parsed on this line

    For example::

       ..text
       =The Page Title
       *a bold thing*
       -<<*a smaller bold thing not displayed immediately*

    Flag::

    **expose=<type;args>** - method to use to expose the text

**--- image**
    Page content is the filename. The image will be automatically scaled to
    fit the screen size without scaling up unless the zoom flag is set.

    Flags include:

    **zoom** - zoom smaller image up to fit in screen

    **title=<text>** - set the image title, will appear above image in same
    style as text page title

    **caption=<text>** - set the image caption, will appear below the image
    in same style as text page

    For example::

        ..image
          zoom
          caption=A Screenshot
        screenshot.png

**--- code**
    Display a text file contents. The page content is the filename to read
    content from.

    Flags can be:

    **title** - a title to display above the code

    **expose** - page is in highlight mode (see below)

    **syntax** - code is syntax highlighted

    **skiphashbang** - don't display the leading #! line

    Config used::

        bold_font           - title
        code_font           - code text
        code_fgcolour       - code text
        code_bgcolour       - background behind code text
        code_exposecolour   - highlighted code text
        code_font_size      - maximum font size for code text
                              (this will be reduced to fit code to the screen)

    If a line ends with the comment '#--' then it will not be displayed. It
    and subsequent '#--' lines will be replaced by a single line with
    elipses. This is used to remove chunks of code that may have been
    repeated from a prior slide.

    In highlight mode, lines that end with '#00' are displayed in a
    different colour (Config.code_exposecolour). Also a line starting with
    '#=00' followed by some text will be used to set the page title.

    Subsequent sections (#01/#=01, #02/#=02, &c=) are displayed with each
    'next'.

**--- spawn**
    Spawn a command given in the page content.

    Flags can be:

    **pause** - presentation will not advance automatically to next page
    until you hit 'next' again.

    **repeat** - if you re-visit the spawn page, it will re-run the command
    (the default is to only run it once, no matter how many times you
    visit the page)

    Hitting Ctrl-C on a page will stop all background spawned tasks.

**--- shell**
    Run an interactive shell. Optional page content gives autotyping input.

    Flags can be:

    **prompt=<text>** - change the prompt - default is "shell >"

    **title=<text>** - set the page title, will appear above shell in same
    style as text page title

    **auto** - start in autotyping mode

    The rest of the lines in the page are inputs to autotyping.

    <TAB> in autotyping mode fills the rest of the line.

    Ctrl-I switches on/off autotyping.

    shift-return or tab finishes current line

    Lines ending in "\" will prompt for more input before passing
    to the shell.

    Output from the shell goes to the window (stdout/stderr). You
    can't send input to commands interactively (yet).

    Ctrl-C interrupts a running command.

**--- py**
    Run an interactive Python session. Optional page content gives autotyping
    input.

    Flags can be:

    **title=<text>** - set the page title, will appear above shell in same
    style as text page title

    **sysver** - display the python version guff

    **auto** - start in autotyping mode

    The rest of the lines in the page are inputs to autotyping.

    <TAB> in autotyping mode fills the rest of the line.

    Ctrl-I switches on/off autotyping.

    shift-return or tab finishes current line

**--- resource**
    Add a directory to the pyglet resources search path - used to find
    images you reference.

**--- config**

    Lines in config section set options for subsequent pages.

    Can specify colours as 0-255 values "R,G,B" or "R,G,B,A"

**--- stop**

    Everything else in the file is ignored

**--- <custom page>**
    Load a custom page class. The page specification above must end in
    the page class (see below for how to make custom pages). For example
    "..mypages.FancyPage" will attempt to load the FancyPage class from
    the mypages module.



Custom Pages
""""""""""""

Custom pages simply subclass bruce.Page.

Flags are parsed as NAME=VALUE pairs and passed as keyword arguments to the
page constructor. The rest of the page is passed as a single string as an
argument to the page constructor.

Custom pages may define their own configuration variables too.
